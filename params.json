{
  "name": "Fluxweb",
  "tagline": "a lightweight web development framework",
  "body": "# fluxweb\r\na lightweight web development framework based by react+flux+webpack,Shielding the explicit call process, so that developers focus on the development of components and business logic\r\n.\r\n## INTRODUCTION\r\n### React\r\n[http://facebook.github.io/react/](http://facebook.github.io/react/ \"\")\r\n### Flux\r\n[http://facebook.github.io/flux/](http://facebook.github.io/flux/ \"\")\r\n\r\n## Build/Run Dependencies\r\n1. node.js - server-side JS engine\r\n\r\n## node install introduction\r\n[https://github.com/nodejs/node](https://github.com/nodejs/node)\r\n\r\n## fluxweb install introduction\r\nRun the following command:\r\n```\r\ngit clone https://github.com/yb030832/fluxweb.git\r\ncd fluxweb\r\nnpm install\r\n```\r\n## Quick Start\r\n### 1.Create a Store\r\n`/broswer/javascripts/stores/IndexStore.js`\r\n```\r\nvar resultText=\"\";\r\nvar IndexStore = Flux.createStore({\r\n\r\n    /*\r\n      Update storage results, update as the name of the contract must be implemented\r\n    */\r\n    update:function(action) {\r\n        var text = action.text.trim();\r\n        switch(action.actionType) {\r\n            /*\r\n              Register updateText action processing logic\r\n            */\r\n            case \"updateText\":\r\n                if (text !== '') {\r\n                    resultText=text;\r\n                }\r\n                break;\r\n            default:\r\n            // no op\r\n        }\r\n    },\r\n    /*\r\n      Get the storage results,\r\n      getResultText for the custom function name,\r\n      optional implementation, in general,\r\n      there is at least one getSomething function,\r\n      in order to obtain the storage data\r\n    */\r\n    getResultText: function() {\r\n        return resultText;\r\n    }\r\n});\r\nmodule.exports = IndexStore;\r\n```\r\n### 2.Create a Action\r\n`/broswer/javascripts/actions/IndexAction.js`\r\n```\r\nvar Flux = require('../../vendor/util/FluxUtil');\r\nvar IndexAction = Flux.createAction({\r\n    /*\r\n      Initiate the update action, updateText for the custom function name,\r\n      optional implementation, in general,\r\n      there is at least one updateSomething function\r\n      in order to initiate action\r\n    */\r\n    updateText: function(text) {\r\n        /*\r\n          Broadcast update action, all Store will receive\r\n        */\r\n        this.dispatch(\"updateText\",text);\r\n    }\r\n});\r\nmodule.exports = IndexAction;\r\n```\r\n### 3. Create a View\r\n`/broswer/javascripts/app/index.jsx`\r\n```\r\n   var IndexStore = require('../stores/IndexStore');\r\n   var IndexAction = require('../actions/IndexAction');\r\n   var Index = Flux.createView({\r\n       /*\r\n       Gets the current view of the Store,\r\n       if you use the Store, you must implement the method,\r\n       otherwise it will not be able to respond to the status update\r\n       */\r\n       getStore: function(){\r\n           return [IndexStore];\r\n       },\r\n       /*\r\n         Gets the current view state, usually from Store\r\n       */\r\n       getState: function(){\r\n           return {text: LoginStore.getResultText()};\r\n       },\r\n       /*\r\n         Initiate a action, this is the click event initiated\r\n       */\r\n       handleClick:function(){\r\n           IndexAction.updateText(\"this is my first update\");\r\n       },\r\n       /*\r\n         View rendering, automatic call when the state changes\r\n       */\r\n       render: function() {\r\n           return (\r\n               <div>\r\n                  <label>{this.state.text}</label>\r\n                  <button onClick={this.handleClick}></button>\r\n               </div>\r\n        },\r\n        /*\r\n          Size of the re painting, the size of the change occurs when the automatic call\r\n        */\r\n        resize: function() {\r\n            /*\r\n              Gets the size of the current page\r\n            */\r\n            var width=FluxConstant.view.PAGE_WIDTH;\r\n            var height=FluxConstant.view.PAGE_HEIGHT;\r\n        }\r\n   });\r\n   module.exports = Index;\r\n```\r\n### 4.Create a Less\r\n`/broswer/stylesheets/index.less`\r\n```\r\n@baseBackgroundColor:#ffffff;\r\n@width:100%;\r\n@height:100%;\r\nhtml,body{\r\n  width:@width;\r\n  height:@height;\r\n  overflow:hidden;\r\n}\r\n#container{\r\n  width:@width;\r\n  height:@height;\r\n  background-color:@baseBackgroundColor;\r\n}\r\n```\r\n### 5.Call view\r\n`/broswer/javascripts/app.jsx`\r\n```\r\nvar Index=require('./app/Index');\r\nrequire(['./app/Index'], function (Index) {\r\n        //Initial page rendering\r\n        ReactDOM.render(\r\n            <Index/>,\r\n            document.getElementById('container')\r\n        );\r\n});\r\n```\r\n### 7.Build And Watch\r\n~~~\r\ngrunt default\r\n~~~\r\n### 8.Start a Local HTTP Server\r\n~~~\r\nnode ./server/bin/www\r\n~~~\r\nOKï¼Œvisit local site look our result: http://localhost:3000\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}